"""
Django settings for FC92_Club project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import dj_database_url
from decouple import config, Csv  # Import Csv
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('DJANGO_ALLOWED_HOSTS', default='127.0.0.1,localhost', cast=Csv())

# Add CSRF_TRUSTED_ORIGINS, read from environment
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='http://localhost:8000,http://127.0.0.1:8000', cast=Csv())

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

     # Third-party apps
    'crispy_forms',
    'crispy_bootstrap5',
    'storages', # Add django-storages

    # Local apps
    'users.apps.UsersConfig',
    'finances.apps.FinancesConfig',
    'pages.apps.PagesConfig',
    'django.contrib.humanize',
    'gallery.apps.GalleryConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add Whitenoise middleware BELOW SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'FC92_Club.admin_access.AdminAccessMiddleware',  # Add our custom middleware
]

ROOT_URLCONF = 'FC92_Club.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # Make sure this points to your templates directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FC92_Club.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Construct LOCAL_DB_URL using defaults for config() to avoid errors when env vars are missing
# These defaults are primarily for preventing errors during checks/imports on Heroku;
# the actual values from .env will be used locally if present.
LOCAL_DB_URL = f"postgres://{config('SQL_USER', default='localuser')}:{config('SQL_PASSWORD', default='localpass')}@localhost:{config('SQL_PORT', default='5433')}/{config('SQL_DATABASE', default='localdb')}"

# Let dj_database_url read DATABASE_URL directly from the environment (Heroku provides this)
# Use the constructed LOCAL_DB_URL as the fallback default for local development
DATABASES = {
    'default': dj_database_url.config(default=LOCAL_DB_URL, conn_max_age=600)
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # Directory where collectstatic gathers files
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Your project's static files
]

# Add Whitenoise storage
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User Uploads)
if DEBUG:
    # Local development settings: Use local filesystem for media
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
    print("INFO: Using local filesystem for media storage (DEBUG=True).")
else:
    # Production settings (Azure Blob Storage)
    AZURE_ACCOUNT_NAME = config('AZURE_ACCOUNT_NAME', default=None)
    AZURE_ACCOUNT_KEY = config('AZURE_ACCOUNT_KEY', default=None) # Read it but don't log it directly
    AZURE_CONTAINER = config('AZURE_CONTAINER', default=None)

    # --- Add Logging ---
    print(f"--- Azure Settings Check ---")
    print(f"AZURE_ACCOUNT_NAME: {AZURE_ACCOUNT_NAME}")
    print(f"AZURE_ACCOUNT_KEY is set: {bool(AZURE_ACCOUNT_KEY)}") # Log if key is present, not the key itself
    print(f"AZURE_CONTAINER: {AZURE_CONTAINER}")
    # --- End Logging ---

    if AZURE_ACCOUNT_NAME and AZURE_ACCOUNT_KEY and AZURE_CONTAINER:
        DEFAULT_FILE_STORAGE = 'storages.backends.azure_storage.AzureStorage'

        # --- Removed AZURE_LOCATION ---
        # AZURE_LOCATION = 'media' # Commented out: Store files directly in the container root

        # --- Removed AZURE_CONTAINER_PUBLIC_ACCESS ---
        # This setting is configured in Azure Portal, not directly used here.
        # AZURE_CONTAINER_PUBLIC_ACCESS = 'blob'

        # Construct the base URL for media files (pointing to container root)
        if AZURE_CUSTOM_DOMAIN:
            # Ensure custom domain doesn't include extra paths if it points to the container root
            custom_domain = AZURE_CUSTOM_DOMAIN.split('/')[0] # Basic strip of potential path
            MEDIA_URL = f'https://{custom_domain}/' # Points to root
        else:
            # Standard Azure URL pointing to the container root
            MEDIA_URL = f'https://{AZURE_ACCOUNT_NAME}.blob.core.windows.net/{AZURE_CONTAINER}/' # Points to root

        MEDIA_ROOT = '' # Not used by AzureStorage backend
        AZURE_OVERWRITE_FILES = config('AZURE_OVERWRITE_FILES', default=False, cast=bool)

        print(f"INFO: Using Azure Blob Storage for media. Account: {AZURE_ACCOUNT_NAME}, Container: {AZURE_CONTAINER}, URL: {MEDIA_URL}")

        # Add these settings to ensure proper URL handling for public blobs
        AZURE_URL_EXPIRATION_SECS = None  # URLs for public blobs won't expire
        AZURE_CACHE_CONTROL = 'public, max-age=31536000'  # Cache public blobs for 1 year

        print(f"INFO: Using Azure Blob Storage for media. DEFAULT_FILE_STORAGE set.")
        print(f"MEDIA_URL configured as: {MEDIA_URL}")
    else:
        # Fallback if Azure Blob Storage is not configured in production
        # Raise an error because this configuration is essential for production
        print("WARNING: Azure Blob Storage settings incomplete, media files may not work.")
        DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage' # Fallback explicitly
        raise ImproperlyConfigured(
            "Azure Storage settings (AZURE_ACCOUNT_NAME/KEY or AZURE_CONNECTION_STRING, and AZURE_CONTAINER_NAME) not found. "
            "These environment variables are required in production."
        )


# Create static/media directories if they don't exist (mainly for local dev)
os.makedirs(os.path.join(BASE_DIR, 'static'), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, 'staticfiles'), exist_ok=True)
if DEBUG:
    os.makedirs(MEDIA_ROOT, exist_ok=True) # MEDIA_ROOT is only defined in DEBUG mode now

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'users.User'

# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Login/Logout Redirects
LOGIN_REDIRECT_URL = 'pages:home'  # Redirect to home after login
LOGIN_URL = 'login'  # URL to redirect to for login
LOGOUT_REDIRECT_URL = 'pages:home'  # Redirect to home after logout

# Email Configuration
if DEBUG:
    # Development email settings (e.g., MailHog)
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'mailhog'  # Service name from docker-compose (if used)
    EMAIL_PORT = 1025       # MailHog SMTP port
    EMAIL_USE_TLS = False
    EMAIL_HOST_USER = ''
    EMAIL_HOST_PASSWORD = ''
    DEFAULT_FROM_EMAIL = 'debug@localhost'
else:
    # Production email settings (read from .env/Config Vars)
    EMAIL_HOST = config('EMAIL_HOST', default=None)

    if EMAIL_HOST: # Only configure SMTP if EMAIL_HOST is actually set
        EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
        EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
        EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
        EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
        EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
        DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='webmaster@localhost')
        print(f"INFO: Using SMTP Email Backend. Host: {EMAIL_HOST}")
    else:
        # Fallback to console backend if EMAIL_HOST is not configured
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
        DEFAULT_FROM_EMAIL = 'console@localhost'
        print("WARNING: EMAIL_HOST not set, using console email backend.")


# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours
# Ensure these are True only if your site is served over HTTPS in production
SESSION_COOKIE_SECURE = not DEBUG # True in production, False in Debug
SESSION_SAVE_EVERY_REQUEST = True

# CSRF Settings
# Ensure these are True only if your site is served over HTTPS in production
CSRF_COOKIE_SECURE = not DEBUG # True in production, False in Debug
CSRF_COOKIE_HTTPONLY = True
# SESSION_COOKIE_SECURE = not DEBUG # Redundant, set above


# Configure Django App for Heroku
# Ensure django-heroku is not configuring settings automatically if you are using it
# import django_heroku
# django_heroku.settings(locals(), staticfiles=False) # Example: disable staticfiles config if handling manually

# settings.py
# ... (all your other settings) ...

# settings.py
# ... other settings ...

# --- START FILE UPLOAD / STORAGE / LOGGING ---

# Media files (User Uploads)
# ... (Keep your existing DEBUG vs Production block) ...

# Force uploads to use temporary files instead of in-memory
FILE_UPLOAD_MAX_MEMORY_SIZE = 0

# --- Explicit Logging Configuration ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': { 'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}', 'style': '{', },
        'simple': { 'format': '{levelname} {message}', 'style': '{', },
    },
    'handlers': {
        'console': { 'level': 'DEBUG', 'class': 'logging.StreamHandler', 'formatter': 'verbose', }, # Set console to DEBUG
    },
    'loggers': {
        '': { 'handlers': ['console'], 'level': 'INFO', 'propagate': True, }, # Root logger at INFO
        'django': { 'handlers': ['console'], 'level': 'INFO', 'propagate': False, },
        # --- Enable these for detailed storage/SDK logs if needed ---
        'storages': { 'handlers': ['console'], 'level': 'DEBUG', 'propagate': False, },
        'azure.storage.blob': { 'handlers': ['console'], 'level': 'DEBUG', 'propagate': False, },
        # --- ---------------------------------------------------- ---
    },
}
# --- END FILE UPLOAD / STORAGE / LOGGING ---